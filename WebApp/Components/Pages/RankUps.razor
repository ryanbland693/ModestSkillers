@page "/rankups"
@using RankChecker.BusinessLogic
@inject IRankService rankService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h3>Rank Ups</h3>
<MudPaper Class="mb-4 d-flex justify-center align-content-center" Elevation="0">
    <MudStack Row>

    
        <MudCheckBox T="bool" Label="Check for ranks that are too high" Value="CheckTooHigh" ValueChanged="OnUpdateCheckTooHigh"  />
        <MudCheckBox T="bool" Label="Include users with an unknown join date" Value="IncludeUnknownJoinDates" ValueChanged="OnUpdateIncludeUnknownJoinDates" />
        <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" OnClick="FetchData">Refresh</MudButton>
    </MudStack>
</MudPaper>
@if(Checks is null || loading)
{
    <MudProgressCircular Indeterminate Color="Color.Primary" />
} 
else
{
    if (Checks.Count == 0)
    {
        <MudText>No rank ups found</MudText>
    }
    else
    {
        <MudTable Items="Checks">
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="NameSort">Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="XpSort">Clan Xp</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="CurrentRankSort">Current Rank</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="ExpectedRankSort">Expected Rank</MudTableSortLabel></MudTh>
                <MudTh>Message</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Xp">@context.ClanXp.ToString("n0")</MudTd>
                <MudTd DataLabel="Current Rank">@context.CurrentRank</MudTd>
                <MudTd DataLabel="Expected Rank">@context.ExpectedRank</MudTd>
                <MudTd DataLabel="Message">@context.Message</MudTd>
            </RowTemplate>
        </MudTable>
    }
    <MudText Typo="Typo.caption">Data is based on RunePixels</MudText>
}

@code {
    List<ClanMemberRankCheck>? Checks;
    public Boolean CheckTooHigh { get; set; }
    public Boolean IncludeUnknownJoinDates { get; set; }
    bool loading;

    private Func<ClanMemberRankCheck, object> NameSort = x => x.Name;
    private Func<ClanMemberRankCheck, object> XpSort = x => x.ClanXp;
    private Func<ClanMemberRankCheck, object> CurrentRankSort = x => x.CurrentRank;
    private Func<ClanMemberRankCheck, object> ExpectedRankSort = x => x.ExpectedRank;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await FetchData();
    }

    private async Task FetchData() 
    {
        CheckTooHigh = (await localStorage.GetItemAsync<string>(nameof(CheckTooHigh))) == bool.TrueString;
        IncludeUnknownJoinDates = (await localStorage.GetItemAsync<string>(nameof(IncludeUnknownJoinDates))) == bool.TrueString;
        Checks = await rankService.CheckRanksAsync(CheckTooHigh, IncludeUnknownJoinDates);
        base.StateHasChanged();
    }

    private async Task OnUpdateCheckTooHigh(bool value)
    {
        loading = true;
        CheckTooHigh = value;
        await localStorage.SetItemAsStringAsync(nameof(CheckTooHigh), CheckTooHigh.ToString());
        await FetchData();
        loading = false;
    }

    private async Task OnUpdateIncludeUnknownJoinDates(bool value)
    {
        loading = true;
        IncludeUnknownJoinDates = value;
        await localStorage.SetItemAsStringAsync(nameof(IncludeUnknownJoinDates), IncludeUnknownJoinDates.ToString());
        await FetchData();
        loading = false;
    }
}
